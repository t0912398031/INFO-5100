package UserInterface.BitCoinMall;



import Business.BitCoinMall.Order;
import Business.BitCoinMall.OrderHistory;
import Business.BitCoinMall.OrderItem;
import Business.BitCoinMall.Product;
import Business.Enterprise.DepositEnterprise;
import Business.Enterprise.InvestmentEnterprise;
import Business.Enterprise.MallEnterprise;
import Business.Finance.FinancialAccount.FinancialAccount;
import Business.Organization.InventoryOrg;
import Business.Organization.LogisticsOrg;
import Business.Organization.Organization;
import java.awt.CardLayout;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JIN
 */
public class BitCoinMallJPanel extends javax.swing.JPanel {


    private JPanel userProcessContainer;
    private Order order;
    private LogisticsOrg logisticsorg;
    private OrderHistory orderHistory;
    private MallEnterprise mallenterprise;
    private InventoryOrg inventoryOrg;
    private boolean isCheckout = false;
    private InvestmentEnterprise investmentEnterprise;
    private DepositEnterprise depositEnterprise;

    public BitCoinMallJPanel(JPanel userProcessContainer, LogisticsOrg logisticsorg,MallEnterprise mallenterprise, InvestmentEnterprise enterprise, DepositEnterprise de) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.order=order;
        this.orderHistory = logisticsorg.getOrderHistory();
        this.logisticsorg = logisticsorg;
        this.mallenterprise=mallenterprise;
        this.inventoryOrg = (InventoryOrg) mallenterprise.getOrganizationDirectory().searchOrgByType(Organization.Type.Inventory);
        this.investmentEnterprise = enterprise;
        this.depositEnterprise = de;
        newOrder();
        populateTab();
        setBackground(new java.awt.Color(204, 255, 204));
        setSize(1480, 1050);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    
     public ImageIcon ResizeIamge(String imagepath,byte[] pic)
    {
        ImageIcon myImage = null;
        
        if(imagepath != null)
        {
            myImage = new  ImageIcon(imagepath);
        }
            else{
                    myImage = new ImageIcon(pic);
                    }
        
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(lbl_mallshow.getWidth(), lbl_mallshow.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        return image;    
    }
     
      private void displayImage(Product product)
    {
        if(product==null) return;
        if(product.getPicture()==null) return;
        if(product.getPicture().trim().isEmpty()) return;
        String path = product.getPicture();  
        lbl_mallshow.setIcon(ResizeIamge(path, null));
    }
     
     
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        lbl_mallshow = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(750, 511));

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Image:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText(" Product Catalog");

        jLabel4.setBackground(new java.awt.Color(255, 255, 204));
        jLabel4.setFont(new java.awt.Font("Vijaya", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/MalliconNice3.jpg"))); // NOI18N
        jLabel4.setText("  Armor Yourself");
        jLabel4.setIconTextGap(7);

        addtoCartButton6.setBackground(new java.awt.Color(255, 255, 255));
        addtoCartButton6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        addtoCartButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/cart.png"))); // NOI18N
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.setIconTextGap(10);
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel5.setText("Quantity:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Item in cart");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(orderTable);

        btnRemoveOrderItem.setBackground(new java.awt.Color(255, 255, 255));
        btnRemoveOrderItem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnRemoveOrderItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/Minus.png"))); // NOI18N
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.setIconTextGap(10);
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnCheckOut.setBackground(new java.awt.Color(255, 255, 255));
        btnCheckOut.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnCheckOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/check.png"))); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.setIconTextGap(20);
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        lbl_mallshow.setBackground(new java.awt.Color(255, 255, 204));
        lbl_mallshow.setOpaque(true);

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/back.png"))); // NOI18N
        jButton3.setText("Back");
        jButton3.setIconTextGap(22);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(304, 304, 304)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addtoCartButton6))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnRemoveOrderItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCheckOut))
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_mallshow, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jButton3)
                .addGap(16, 16, 16)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addtoCartButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(quantitySpinner)
                                    .addComponent(jLabel5))
                                .addGap(8, 8, 8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel7)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_mallshow, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemoveOrderItem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    public void newOrder(){
        if (!isCheckout) {
            this.order = new Order();
        }
       
        quantitySpinner.setValue(0);
    }

    public void populateTab() {
        DefaultTableModel dtm = (DefaultTableModel)productTable.getModel();
        dtm.setRowCount(0);

        for (Product p : mallenterprise.getProductCatalog().getProductCatalog()) {
            Object[] row = new Object[4];
            row[0] = p;
            row[1] = p.getId();
            row[2] = p.getPrise();
            row[3] = p.getAvail();
            dtm.addRow(row);

        }

    }


    public void refreshOrderTab() {
        DefaultTableModel dtm = (DefaultTableModel) orderTable.getModel();
        dtm.setRowCount(0);
   
        
        for (OrderItem oi : order.getOrderItemList()) {
            Object[] row = new Object[4];
            row[0] = oi;
            row[1] = oi.getPrise();
            row[2] = oi.getQuantity();
            row[3] = oi.getQuantity()*oi.getPrise();
            dtm.addRow(row);
        }

    }

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = productTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        Product selectedProduct = (Product) productTable.getValueAt(selectedRow, 0);
        int fetchQty = (Integer) quantitySpinner.getValue();
        if (fetchQty <= 0) {
            JOptionPane.showMessageDialog(null, "The quantity cannot be less than 1");
            return;
        }
      
            if (fetchQty <= selectedProduct.getAvail()) {

                boolean alreadyPresent = false;
                for (OrderItem oi : order.getOrderItemList()) {
                    if (oi.getProduct() == selectedProduct) {
                        oi.setPrise( selectedProduct.getPrise());
                        int oldAva = selectedProduct.getAvail();
                        int newAva = oldAva - fetchQty;
                        selectedProduct.setAvail(newAva);
                        oi.setQuantity(oi.getQuantity() + fetchQty);
                        alreadyPresent = true;
                        populateTab();
                        refreshOrderTab();
                        break;
                    }
                }
                if (!alreadyPresent) {
                    int oldAva = selectedProduct.getAvail();
                    int newAva = oldAva - fetchQty;
                    selectedProduct.setAvail(newAva);
                    order.addOrderItem(selectedProduct, fetchQty);                
                    populateTab();
                    refreshOrderTab();

                }
            } else {
                JOptionPane.showMessageDialog(this, "Quantity is not enough");
                return;
            }
         
//        }catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Invalid Price");
//            return;
//        }



    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if (order.getOrderItemList().size() > 0) {
            inventoryOrg.getMasterOrderCatalog().addOrder(order);
            orderHistory.addOrder(order);
            
            
            JOptionPane.showMessageDialog(null, "Order placed successfully");
            isCheckout = true;
            
            int optionNO = JOptionPane.NO_OPTION;
            int res = JOptionPane.showConfirmDialog(null, "Pay now?", "Reminder", JOptionPane.YES_NO_OPTION);
            if (res == optionNO) {
//                Order order = new Order();
//                this.order = order;
                isCheckout = false;
                newOrder();
                refreshOrderTab();
                populateTab();
            } else {
                FinancialAccount buyerAccount = depositEnterprise.getAccountInfo(investmentEnterprise.getName());
                if(depositEnterprise.checkCoinAmount((int)order.getTotalPrice(), buyerAccount)) {
                    JOptionPane.showMessageDialog(null, "Not enough Coins");
                    return;
                }
//              
                depositEnterprise.checkout(order, investmentEnterprise, mallenterprise);
                JOptionPane.showMessageDialog(null, "successfully");
                isCheckout = false;
                newOrder();
                refreshOrderTab();
                populateTab();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Chart is empty");
        }

    }//GEN-LAST:event_btnCheckOutActionPerformed
    
    public void jumpToDirectPay(){
//        DirectPaymentJPanel directPaymentJPanel = new DirectPaymentJPanel(userProcessContainer,order, userAccount,this);
//        userProcessContainer.add("ViewOrderHistoryJPanel", directPaymentJPanel);
//        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
//        cardLayout.next(userProcessContainer);
    }
    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int selectedRow = orderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        int option = JOptionPane.YES_OPTION;
        int res = JOptionPane.showConfirmDialog(null, "The item will be removed", "Warning", JOptionPane.YES_NO_OPTION);
        if (res == option) {
            OrderItem oi = (OrderItem) orderTable.getValueAt(selectedRow, 0);
            int currentAva = oi.getProduct().getAvail();
            int oldQty = oi.getQuantity();
            oi.getProduct().setAvail(currentAva + oldQty);
            order.removeOrderItem(oi);
            populateTab();
            refreshOrderTab();
        }      
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void orderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderTableMouseClicked
        // TODO add your handling code here:
        int selectedrow = orderTable.getSelectedRow();
        if(selectedrow<0) return;
        OrderItem oi = (OrderItem) orderTable.getValueAt(selectedrow,0);
        Product p = oi.getProduct();
        displayImage(p);
    }//GEN-LAST:event_orderTableMouseClicked

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        // TODO add your handling code here:
        int selectedrow = productTable.getSelectedRow();
        if(selectedrow<0) return;
        Product p = (Product) productTable.getValueAt(selectedrow, 0);
        displayImage(p);
    }//GEN-LAST:event_productTableMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_mallshow;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    // End of variables declaration//GEN-END:variables
}
