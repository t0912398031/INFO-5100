/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustodianEnterprise;

import Business.EcoSystem;
import Business.Enterprise.CustodyEnterprise;
import Business.Enterprise.DepositEnterprise;
import Business.Enterprise.Enterprise;
import Business.Finance.FinancialAccount.FinancialAccount;
import Business.Organization.AccountingOrg;
import Business.Organization.TransactionOrg;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.InvestmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lingfengzhou
 */
public class AccountingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AccountingJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private AccountingOrg accountingOrg;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    private double balance;

    public AccountingJPanel(JPanel userProcessContainer, UserAccount account, AccountingOrg accountingOrg, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        setSize(800, 600);
        this.account = account;
        this.userProcessContainer = userProcessContainer;
        this.accountingOrg = accountingOrg;
        this.enterprise = (CustodyEnterprise) enterprise;
        this.ecoSystem = ecoSystem;
        populateTable();
        populateMyTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) accountingJTable.getModel();
        model.setRowCount(0);

        for (WorkRequest request : accountingOrg.getWorkQueue().getWorkRequestList()) {
            InvestmentWorkRequest workRequest = (InvestmentWorkRequest) request;
            Object[] row = new Object[6];
            row[0] = workRequest;
            row[1] = workRequest.getType();
            row[2] = workRequest.getPrice();
            row[3] = workRequest.getAmount();
            row[4] = workRequest.getRequestDate();
            row[5] = workRequest.getStatus();
            model.addRow(row);
        }
    }

    private void populateMyTable() {
        DefaultTableModel dtm = (DefaultTableModel) myAccountingJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[6];
            InvestmentWorkRequest workRequest = (InvestmentWorkRequest) request;
            row[0] = workRequest;
            row[1] = workRequest.getType();
            row[2] = workRequest.getPrice();
            row[3] = workRequest.getAmount();
            row[4] = workRequest.getRequestDate();
            row[5] = workRequest.getStatus();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountingJTable = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        myAccountingJTable = new javax.swing.JTable();
        back = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 153));

        jLabel4.setFont(new java.awt.Font("新細明體", 0, 24)); // NOI18N
        jLabel4.setText("Accounting Assistant");

        accountingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Number", "Type", "Price", "Amount", "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(accountingJTable);

        btnAssign.setBackground(new java.awt.Color(255, 255, 255));
        btnAssign.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAssign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/OK.png"))); // NOI18N
        btnAssign.setText("Assign to Me");
        btnAssign.setIconTextGap(10);
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("新細明體", 0, 18)); // NOI18N
        jLabel1.setText("My Work:");

        myAccountingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Number", "Type", "Price", "Amount", "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(myAccountingJTable);

        back.setBackground(new java.awt.Color(255, 255, 255));
        back.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/back.png"))); // NOI18N
        back.setText("Back");
        back.setIconTextGap(22);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/OK - green.png"))); // NOI18N
        jButton2.setText("Confrim");
        jButton2.setIconTextGap(25);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAssign))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(111, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        int selectedRow = accountingJTable.getSelectedRow();
        if (selectedRow >= 0) {
            InvestmentWorkRequest workRequest = (InvestmentWorkRequest) accountingJTable.getValueAt(selectedRow, 0);
            if (workRequest.getStatus().equalsIgnoreCase("Verifying")) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Assign selected workrequest?", "Warning", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    workRequest.setStatus("Verifying(Assigned)");
                    account.getWorkQueue().addWorkRequest(workRequest);
                    JOptionPane.showMessageDialog(null, "Assigned successfully");
                    populateTable();
                    populateMyTable();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Unable to Assign selected workrequest", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select any row", "Warning", JOptionPane.WARNING_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnAssignActionPerformed

    public boolean verifyBalance(InvestmentWorkRequest workRequest) {
        DepositEnterprise depositEnterprise = (DepositEnterprise) ecoSystem.getEnterpriseNetwork().searchByName("Universal Bank");

        for (FinancialAccount financialAccount : depositEnterprise.getFinancialAccountDirectory().getFinancialAccountList()) {
            if (financialAccount.getName().equalsIgnoreCase(enterprise.getName())) {
                this.balance = financialAccount.getDollorAccount();
                break;
            }
        }
        if (balance < workRequest.getAmount() * workRequest.getPrice() * (1 + workRequest.getRate())) {
            return false;
        } else {
            return true;
        }

    }

    public boolean verifyCoin(InvestmentWorkRequest workRequest) {
        int coinAmount = 0;
        DepositEnterprise depositEnterprise = (DepositEnterprise) ecoSystem.getEnterpriseNetwork().searchByName("Universal Bank");
        for (FinancialAccount financialAccount : depositEnterprise.getFinancialAccountDirectory().getFinancialAccountList()) {
            if (financialAccount.getName().equalsIgnoreCase(workRequest.getInvestmentEnterprise())) {
                coinAmount = financialAccount.getCoinCollection().getCoinList().size();
                break;
            }
        }
        if (coinAmount < workRequest.getInitialAmount()) {
            return false;
        }
        return true;
    }
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer); 
    }//GEN-LAST:event_backActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = myAccountingJTable.getSelectedRow();
        boolean validFlag = true;
        if (selectedRow >= 0) {
            InvestmentWorkRequest workRequest = (InvestmentWorkRequest) myAccountingJTable.getValueAt(selectedRow, 0);
            if (workRequest.getStatus().equalsIgnoreCase("Verifying(Assigned)")||workRequest.getStatus().equalsIgnoreCase("Denied")) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Start to verify the workrequest?", "Warning", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    if (workRequest.getType().equalsIgnoreCase("buy")) {

                        validFlag = verifyBalance(workRequest);
                    } else {
                        validFlag = verifyCoin(workRequest);
                    }
                    if (!validFlag) {
                        workRequest.setStatus("Denied");
                        JOptionPane.showMessageDialog(null, "not sufficient funds");
                        populateTable();
                        populateMyTable();
                        return;
                    }
                    workRequest.setStatus("Verified");

                    JOptionPane.showMessageDialog(null, "Verified successfully");
                    populateTable();
                    populateMyTable();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Unable to Verify selected workrequest", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select any row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountingJTable;
    private javax.swing.JButton back;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable myAccountingJTable;
    // End of variables declaration//GEN-END:variables
}
