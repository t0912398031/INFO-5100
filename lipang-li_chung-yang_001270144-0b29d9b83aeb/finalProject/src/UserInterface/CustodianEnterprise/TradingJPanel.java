/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustodianEnterprise;

import Business.EcoSystem;
import Business.Enterprise.DepositEnterprise;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.TradingOrg;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.InvestmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import UserInterface.CommonUse.CheckProgress;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lingfengzhou
 */
public class TradingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TradingJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private TradingOrg tradingOrg;
    private Enterprise enterprise;
    private DepositEnterprise de;
    public TradingJPanel(JPanel userProcessContainer, UserAccount account, TradingOrg tradingOrg, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        setSize(800, 600);
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.tradingOrg = tradingOrg;
        this.enterprise = enterprise;
        this.de = (DepositEnterprise) ecoSystem.getEnterpriseNetwork().searchByName("Universal Bank");
        populateTable();
        populateMyTable();
        setBackground(new java.awt.Color(255, 255, 153));
    }

    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel) tradingJTable.getModel();   
        model.setRowCount(0);
        
        for (WorkRequest request : tradingOrg.getWorkQueue().getWorkRequestList()){
            InvestmentWorkRequest workRequest = (InvestmentWorkRequest)request; 
            Object[] row = new Object[6];
            row[0] = workRequest;
            row[1] = workRequest.getType();
            row[2] = workRequest.getPrice();
            row[3] = workRequest.getAmount();
            row[4] = workRequest.getRequestDate();
            row[5] = workRequest.getStatus();           
            model.addRow(row);
        }
    }
    private void populateMyTable(){
        DefaultTableModel dtm = (DefaultTableModel) myTradingJTable.getModel();
        dtm.setRowCount(0);
        
        for(WorkRequest request:userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            InvestmentWorkRequest workRequest = (InvestmentWorkRequest)request;
            row[0] = workRequest;
            row[1] = workRequest.getType();
            row[2] = workRequest.getPrice();
            row[3] = workRequest.getAmount();
            row[4] = workRequest.getRequestDate();
            row[5] = workRequest.getStatus();           
            dtm.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tradingJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        myTradingJTable = new javax.swing.JTable();
        back = new javax.swing.JButton();
        btnAssign1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        checkBtn = new javax.swing.JButton();

        jLabel4.setFont(new java.awt.Font("新細明體", 0, 24)); // NOI18N
        jLabel4.setText("Trading Manager Work Area");

        tradingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Number", "Type", "Price", "Amount", "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tradingJTable);

        jLabel1.setFont(new java.awt.Font("新細明體", 0, 18)); // NOI18N
        jLabel1.setText("My Work:");

        myTradingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Number", "Type", "Price", "Amount", "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(myTradingJTable);

        back.setBackground(new java.awt.Color(255, 255, 255));
        back.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/back.png"))); // NOI18N
        back.setText("Back");
        back.setIconTextGap(22);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        btnAssign1.setBackground(new java.awt.Color(255, 255, 255));
        btnAssign1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAssign1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/OK.png"))); // NOI18N
        btnAssign1.setText("Assign to Me");
        btnAssign1.setIconTextGap(10);
        btnAssign1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssign1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/OK - green.png"))); // NOI18N
        jButton2.setText("Send to ActAssistant");
        jButton2.setIconTextGap(10);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/OK - green.png"))); // NOI18N
        jButton3.setText("Send to Exchange");
        jButton3.setIconTextGap(10);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        checkBtn.setBackground(new java.awt.Color(255, 255, 255));
        checkBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        checkBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/BitCoinMall/picture/view.png"))); // NOI18N
        checkBtn.setText("Check Progess");
        checkBtn.setIconTextGap(10);
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(83, 83, 83)
                        .addComponent(jLabel4)
                        .addGap(174, 174, 174))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAssign1))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(btnAssign1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(checkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backActionPerformed

    private void btnAssign1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssign1ActionPerformed
        // TODO add your handling code here:
        int selectedrow = tradingJTable.getSelectedRow();
        if(selectedrow >=0){
            InvestmentWorkRequest workRequest = (InvestmentWorkRequest) tradingJTable.getValueAt(selectedrow, 0);
            if(workRequest.getStatus().equalsIgnoreCase("Open")){
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Assign selected workrequest?", "Warning", dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION){
                    workRequest.setStatus("Open(Assigned)");
                    userAccount.getWorkQueue().addWorkRequest(workRequest);
                    JOptionPane.showMessageDialog(null, "Assigned successfully");
                    populateTable();
                    populateMyTable();
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Unable to Assign selected workrequest", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select any row", "Warning", JOptionPane.WARNING_MESSAGE);
        } 
    }//GEN-LAST:event_btnAssign1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedrow = myTradingJTable.getSelectedRow();
        if(selectedrow >=0){
            InvestmentWorkRequest workRequest = (InvestmentWorkRequest) myTradingJTable.getValueAt(selectedrow, 0);
            if(workRequest.getStatus().equalsIgnoreCase("Open(Assigned)")){
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Assign selected workrequest?", "Warning", dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION){
                    workRequest.setStatus("Verifying");
                    enterprise.getOrganizationDirectory().searchOrgByType(Organization.Type.Accounting)
                            .getWorkQueue().addWorkRequest(workRequest);
                    JOptionPane.showMessageDialog(null, "Sent to Accounting Org to verify");
                    populateTable();
                    populateMyTable();
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Unable to send selected workrequest", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select any row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (userAccount.getWorkQueue().getWorkRequestList().isEmpty())
        {
               JOptionPane.showMessageDialog(null, "Nothing to send");
               return;
        }
            
        for(WorkRequest wr:userAccount.getWorkQueue().getWorkRequestList()){
            InvestmentWorkRequest ir = (InvestmentWorkRequest) wr;
            if(ir.getStatus().equalsIgnoreCase("Verified")){
                ir.setStatus("Ready to trade");
                de.getOrganizationDirectory().searchOrgByType(Organization.Type.Transaction).getWorkQueue().addMatchRequest(ir);
            }
        }
          JOptionPane.showMessageDialog(null, "All verified requests have been sent to EXCHANGE!");
           
        populateTable();
        populateMyTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        int selectedRow = myTradingJTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(userProcessContainer, "Please select a workrequest!");
            return;
        }
        WorkRequest workRequest = (WorkRequest) myTradingJTable.getValueAt(selectedRow, 0);
        CheckProgress checkProgress = new CheckProgress(workRequest);
        checkProgress.setVisible(true);
    }//GEN-LAST:event_checkBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton btnAssign1;
    private javax.swing.JButton checkBtn;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable myTradingJTable;
    private javax.swing.JTable tradingJTable;
    // End of variables declaration//GEN-END:variables
}
